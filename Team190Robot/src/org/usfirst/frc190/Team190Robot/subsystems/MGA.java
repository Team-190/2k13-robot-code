// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc190.Team190Robot.RobotMap;
import org.usfirst.frc190.Team190Robot.commands.*;
import org.usfirst.frc190.Team190Robot.misc.LimitSwitch;


/**
 *
 */
public class MGA extends Subsystem {
    
    // Actuators
    private Solenoid armSolenoid = new Solenoid(RobotMap.MGA_SOLENDOID);
    private Solenoid armSolenoidBack = new Solenoid(RobotMap.MGA_SOLENOID_BACK);
    
    // Sensors
    // TODO: Figure out final position of the limit switches
    private DigitalInput leftArmLimit = new LimitSwitch(RobotMap.MGA_LEFT_LIMIT, .1);
    private DigitalInput rightArmLimit = new LimitSwitch(RobotMap.MGA_RIGHT_LIMIT, .1);

    // Constants for the MGA's positions
    public static final boolean MGA_UP = true;
    public static final boolean MGA_DOWN = false;
    
    public MGA(){
        // Add Components to LiveWindow
        LiveWindow.addActuator("MGA", "Arm Solenoid", armSolenoid);
        LiveWindow.addSensor("MGA", "Left Arm Limit", leftArmLimit);
        LiveWindow.addSensor("MGA", "Right Arm Limit", rightArmLimit);
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // No default command
    }
    
    /**
     * Sets the position of the OSHAs.  You should use the public variables
     * in the MGA class
     * @param pos The position to set the OSHA to
     */
    public void setPosition(boolean pos){
        if(pos){
            armSolenoidBack.set(!pos);
            armSolenoid.set(pos);
        }
        else{
            armSolenoid.set(pos);
            armSolenoidBack.set(!pos);
        }
    }
    
    /**
     * Tells whether the MGA's are on a bar
     * @return True if we are on a bar, false otherwise
     */
    public boolean hooksBack(){
        return !leftArmLimit.get() && !rightArmLimit.get();
    }
    
    /**
     * Returns whether the left MGA is on a bar.
     * @return True if the left MGA is on a bar, false otherwise
     */
    public boolean leftOnBar(){
        return !leftArmLimit.get();
    }
    
    /**
     * Returns whether the right MGA is on a bar
     * @return True if the left MGA is the bar, false otherwise
     */
    public boolean rightOnBar(){
        return !rightArmLimit.get();
    }
}

