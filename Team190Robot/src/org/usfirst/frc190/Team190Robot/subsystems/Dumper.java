// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc190.Team190Robot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc190.Team190Robot.RobotMap;
import org.usfirst.frc190.Team190Robot.commands.*;

/**
 *
 */
public class Dumper extends Subsystem {

    // Motors
    private SpeedController bucketMotor = new Victor(RobotMap.DUMPER_BUCKET_VICTOR);
    private SpeedController elbowMotor = new Victor(RobotMap.DUMPER_ELBOW_VICTOR);
    
    // Sensors
    // TODO: Change this to Alex's Vex Encoder
    private Encoder bucketEncoder = new Encoder(RobotMap.DUMPER_BUCKET_ENCODER_A, RobotMap.DUMPER_BUCKET_ENCODER_B);
    private AnalogChannel elbowPot = new AnalogChannel(RobotMap.DUMPER_ELBOW_POT);
    
    // PID Controllers
    private PIDController bucketPID = new PIDController(kP_BUCKET, kI_BUCKET, kD_BUCKET, bucketEncoder, bucketMotor);
    private PIDController elbowPID = new PIDController(kP_ELBOW, kI_ELBOW, kD_ELBOW, elbowPot, elbowMotor);

    // PID Constants
    private static final double kP_BUCKET = 1.0;
    private static final double kI_BUCKET = 0;
    private static final double kD_BUCKET = 0;
    private static final double kP_ELBOW = 1.0;
    private static final double kI_ELBOW = 0;
    private static final double kD_ELBOW = 0;
    
    // Position Constants
    // TODO: Find these constants
    public static final double FEEDER_SLOT_ELBOW = 0.0;
    public static final double FEEDER_SLOT_PIVOT = 0.0;
    public static final double STORE_ELBOW = 0;
    public static final double STORE_PIVOT = 0;
    public static final double CLEAR_ELBOW = 0;
    public static final double CLEAR_PIVOT = 0;
    public static final double WOMBO_ELBOW = 0;
    public static final double WOMBO_PIVOT = 0;
    
    public Dumper(){
        // Set up sensors
        bucketEncoder.setDistancePerPulse(1.0);
        bucketEncoder.setPIDSourceParameter(Encoder.PIDSourceParameter.kRate);
        bucketEncoder.start();
        
        // Set up PID Controllers
        bucketPID.setContinuous(false); 
        bucketPID.setAbsoluteTolerance(0.2); 
        bucketPID.setOutputRange(-1.0, 1.0);
        elbowPID.setContinuous(false); 
        elbowPID.setAbsoluteTolerance(0.2); 
        elbowPID.setOutputRange(-1.0, 1.0); 
        
        // Add components to the live window
        LiveWindow.addActuator("Dumper", "Bucket Motor", (Victor) bucketMotor);
        LiveWindow.addSensor("Dumper", "Bucket Encoder", bucketEncoder);
        LiveWindow.addActuator("Dumper", "Bucket PID", bucketPID);
        LiveWindow.addActuator("Dumper", "Elbow Motor", (Victor) elbowMotor);
        LiveWindow.addSensor("Dumper", "Elbow Pot", elbowPot);
        LiveWindow.addActuator("Dumper", "Elbow PID", elbowPID);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        setDefaultCommand(new DumperDoNothing());
    }
    
    // TODO: Determine if this is enough to control the elbow and pivot, or if
    // we need more complex control to coordinate them
    
    /**
     * Sets the position of the pivot joint.  For the most part, use the 
     * constants defined in the class
     * @param pos The position to move to
     */
    public void setPivot(double pos){
        bucketPID.setSetpoint(pos);
    }
    
    /**
     * Sets the position of the elbow joint.  For the most part, use the
     * constants defined in the class
     * @param pos The position to set the elbow to
     */
    public void setElbow(double pos){
        elbowPID.setSetpoint(pos);
    }
}
