// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot;

import org.usfirst.frc190.Team190Robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.DigitalIOButton;
import edu.wpi.first.wpilibj.DriverStationEnhancedIO;
import org.usfirst.frc190.Team190Robot.misc.AnalogButton;


// TODO: Create the Analog button classes
// TODO: Assign buttons to commands
// TODO: Write Next Button Class

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    
    /*
     * CONSTANTS FOR OI INPUTS
     */
    //TODO: Need to find the actual values for these constants
    //climber oi
    final private int NEXT_BTN = 8;
    final private int CANCEL_BTN = 10;
    final private int RESET_BTN = 12;
    final public static int WAIT_FOR_USER_LED = 6;
    final public static int AUTO_CLIMB_LED = 4;
    
    //man climb oi
    final private int OSHA_UP_DOWN = 8;
    final private int OSHA_PIVOT_FORWARD = 6;
    final private int MGA_UP_DOWN = 4;
    final private int DUMPER_CONTROL = 2;
    final public static int CLIMBER_CONTROLS_LED = 2;
    
    //Shooter OI
    final public static int SHOOTER_STATE_BUTTONS = 7;
    final public static int SHOOTER_MANUAL_POT = 1;
    final public static int SHOOTER_PITCH_JOG = 5;
    final public static int SHOOTER_SPEED_JOG = 3;
    final public static int SHOOTER_WHEELS_SWITCH = 1;
    final public static int SHOOTER_TARGET_BUTTON = 3;
    final public static int SHOOTER_SHOOT_BUTTON = 5;
    final public static int SHOOTER_READY_LED = 7;
    final public static int SHOOTER_STORED_LED = 15;
    final public static int SHOOTER_COLLECT_LED = 13;
    final public static int SHOOTER_AUTO_LED = 11;
    final public static int SHOOTER_MANUAL_LED = 9;
    
    
    
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftStick;
    public Joystick rightStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Button nextButton;
    public Button cancelButton;
    public Button resetButton;
    public Button shootButton;
    
    public AnalogButton oshaUp;
    public AnalogButton oshaDown;
    
    public AnalogButton pivotFore;
    public AnalogButton pivotAft;
    
    public AnalogButton mgaUp;
    public AnalogButton mgaDown;
    
    public AnalogButton dumperDump;
    public AnalogButton dumperCollect;
    public AnalogButton dumperStore;
    
    public AnalogButton shooterStore;
    public AnalogButton shooterCollect;
    public AnalogButton shooterAuto;
    public AnalogButton shooterManual;
    
    public AnalogButton shooterPitchUp;
    public AnalogButton shooterPitchDown;
    public AnalogButton shooterSpeedUp;
    public AnalogButton shooterSpeedDown;
    
    private static boolean[] digitalOuts = new boolean[16];
    
    
    public OI() {
        //turn off all of the LEDs
        this.setLED(this.CLIMBER_CONTROLS_LED, false);
        
        //shooter LEDs
        this.setLED(this.SHOOTER_READY_LED, false);
        this.setLED(this.SHOOTER_STORED_LED, false);
        this.setLED(this.SHOOTER_COLLECT_LED, false);
        this.setLED(this.SHOOTER_AUTO_LED, false);
        this.setLED(this.SHOOTER_MANUAL_LED, false);
        
        //climber LEDs
        this.setLED(this.AUTO_CLIMB_LED, false);
        this.setLED(this.WAIT_FOR_USER_LED, false);
        
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightStick = new Joystick(2);
        
        leftStick = new Joystick(1);
        
        nextButton = new DigitalIOButton(this.NEXT_BTN);
        cancelButton = new DigitalIOButton(this.CANCEL_BTN);
        cancelButton.whenPressed(new AbortClimb());
        resetButton = new DigitalIOButton(this.RESET_BTN);
        
        /*
         * OSHA commands
         */
        oshaDown = new AnalogButton(1.65, OSHA_UP_DOWN);
        oshaDown.whileHeld(new OSHARetractInClimbing());
        
        oshaUp = new AnalogButton(3.3, OSHA_UP_DOWN);
        oshaUp.whileHeld(new OSHAExtend());
    
        /*
         * Pivot Commands
         */
        pivotFore = new AnalogButton(3.3, OSHA_PIVOT_FORWARD);
        pivotFore.whenPressed(new OSHAPivotForward());
        
        pivotAft = new AnalogButton(1.65, OSHA_PIVOT_FORWARD);
        pivotAft.whenPressed(new OSHAPivotBack());
        
        /*
         * MGA Commands
         */
        mgaUp = new AnalogButton(3.3, MGA_UP_DOWN);
        mgaUp.whenPressed(new MGAExtend());
        
        mgaDown = new AnalogButton(1.65, MGA_UP_DOWN);
        mgaDown.whenPressed(new MGARetract());
        
        /*
         * Collector Commands
         */
        dumperDump = new AnalogButton(1.1, DUMPER_CONTROL);
        dumperDump.whenPressed(new DumperScore());
        
        dumperCollect = new AnalogButton(2.2, DUMPER_CONTROL);
        dumperCollect.whenPressed(new DumperCollect());
        
        dumperStore = new AnalogButton(3.3, DUMPER_CONTROL);
        dumperStore.whenPressed(new DumperStore());
        
        shooterStore = new AnalogButton(3.3, SHOOTER_STATE_BUTTONS);
        shooterStore.whenPressed(new ShooterStore());
        
        shooterCollect = new AnalogButton(2.475, SHOOTER_STATE_BUTTONS);
        shooterCollect.whenPressed(new ShooterCollect());
        
        shooterAuto = new AnalogButton(1.65, SHOOTER_STATE_BUTTONS);
        shooterAuto.whenPressed(new ShooterAuto());
        
        shooterManual = new AnalogButton(0.825, SHOOTER_STATE_BUTTONS);
        shooterManual.whenPressed(new ShooterManual());
        
        shooterPitchUp = new AnalogButton(3.3, SHOOTER_PITCH_JOG);
        shooterPitchDown = new AnalogButton(1.65, SHOOTER_PITCH_JOG);
        
        shooterSpeedUp = new AnalogButton(3.3, SHOOTER_PITCH_JOG);
        shooterSpeedDown = new AnalogButton(1.65, SHOOTER_PITCH_JOG);
         
        shootButton = new DigitalIOButton(SHOOTER_SHOOT_BUTTON);
        //shootButton.whenPressed(new Shoot());
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("MGA Extend", new MGAExtend());

        SmartDashboard.putData("MGA Retract", new MGARetract());

        SmartDashboard.putData("OSHA Pivot Forward", new OSHAPivotForward());

        SmartDashboard.putData("OSHA Pivot Back", new OSHAPivotBack());

        SmartDashboard.putData("OSHA Extend", new OSHAExtend());

        SmartDashboard.putData("OSHA Retract", new OSHARetractInClimbing());
        
        SmartDashboard.putData("OSHA Retract on Pyramind", new OSHARetractInClimbing());
        
        SmartDashboard.putData("Ready for climb", new ReadyForClimb());

        SmartDashboard.putData("Dumper Collect", new DumperCollect());

        SmartDashboard.putData("Dumper Store", new DumperStore());

        SmartDashboard.putData("Dumper Score", new DumperScore());

        SmartDashboard.putData("Level 1", new Level1());

        SmartDashboard.putData("Climb Level", new ClimbLevel());
        
        SmartDashboard.putData("Drive to Level 1", new DrivetoLevel1());
        
        SmartDashboard.putData("Wait for MGAs", new WaitForMGAs());
        
        SmartDashboard.putData("Wait for Next", new WaitForNext());
        
        SmartDashboard.putData("Wait for Swing", new WaitForSwing());
        
        SmartDashboard.putData("Wait to Win", new WaitToWin());

        SmartDashboard.putData("OSHA", Robot.oSHA);
        
        SmartDashboard.putData("MGA", Robot.mGA);
        
        SmartDashboard.putData("Shooter", Robot.shooter);
        
        SmartDashboard.putData("Dumper", Robot.dumper);
        
        SmartDashboard.putData("Drivetrain", Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    public boolean getTarget()
    {
        try {
        return !DriverStation.getInstance().getEnhancedIO().getDigital(SHOOTER_TARGET_BUTTON);
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    public boolean getWheels()
    {
        try {
        return DriverStation.getInstance().getEnhancedIO().getDigital(SHOOTER_WHEELS_SWITCH);
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    public boolean getShoot()
    {
        try {
        return !DriverStation.getInstance().getEnhancedIO().getDigital(SHOOTER_SHOOT_BUTTON);
        }
        catch (Exception ex) {
            return false;
        }
    }
    
    public double getShooterManualPot()
    {
        try {
        return DriverStation.getInstance().getEnhancedIO().getAnalogIn(SHOOTER_MANUAL_POT); 
        }
        catch (Exception ex) {
            return 0;
        }
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftStick() {
        return leftStick;
    }

    public Joystick getRightStick() {
        return rightStick;
    }

    public static void setLED(int channel, boolean enabled){
       digitalOuts[channel-1] = enabled;
       updateLEDs();
    }
    
    public static void updateLEDs()
    {
        try{
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(CLIMBER_CONTROLS_LED, !digitalOuts[CLIMBER_CONTROLS_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(AUTO_CLIMB_LED, !digitalOuts[AUTO_CLIMB_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(WAIT_FOR_USER_LED, !digitalOuts[WAIT_FOR_USER_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(SHOOTER_READY_LED, !digitalOuts[SHOOTER_READY_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(SHOOTER_STORED_LED, !digitalOuts[SHOOTER_STORED_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(SHOOTER_COLLECT_LED, !digitalOuts[SHOOTER_COLLECT_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(SHOOTER_AUTO_LED, !digitalOuts[SHOOTER_AUTO_LED-1]);
                DriverStation.getInstance().getEnhancedIO().setDigitalOutput(SHOOTER_MANUAL_LED, !digitalOuts[SHOOTER_MANUAL_LED-1]);
        }
        catch(Exception ex) {}

    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

