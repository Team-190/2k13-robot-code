// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot;

import org.usfirst.frc190.Team190Robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.DigitalIOButton;

// TODO: Create the Analog button classes
// TODO: Assign buttons to commands
// TODO: Write Next Button Class

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    
    /*
     * CONSTANTS FOR OI INPUTS
     */
    //TODO: Need to find the actual values for these constants
    //climber oi
    final private int NEXT_BTN = 0;
    final private int CANCEL_BTN = 0;
    final private int RESET_BTN = 0;
    final private int WAIT_FOR_USER_LED = 0;
    final private int AUTO_CLIMB_LED = 0;
    
    //man climb oi
    final private int OSHA_UP_DOWN = 0;
    final private int OSHA_PIVOT_FORWARD = 0;
    final private int MGA_UP_DOWN = 0;
    final private int DUMPER_CONTROL = 0;
    final private int CLIMBER_CONTROLS_LED = 0;
    
    
    
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftStick;
    public Joystick rightStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Button nextButton;
    public Button cancelButton;
    public Button resetButton;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightStick = new Joystick(2);
        
        leftStick = new Joystick(1);
        
        nextButton = new DigitalIOButton(this.NEXT_BTN);
        cancelButton = new DigitalIOButton(this.CANCEL_BTN);
        resetButton = new DigitalIOButton(this.RESET_BTN);
        
        
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("MGA Extend", new MGAExtend());

        SmartDashboard.putData("MGA Retract", new MGARetract());

        SmartDashboard.putData("OSHA Pivot Forward", new OSHAPivotForward());

        SmartDashboard.putData("OSHA Pivot Back", new OSHAPivotBack());

        SmartDashboard.putData("OSHA Extend", new OSHAExtend());

        SmartDashboard.putData("OSHA Retract", new OSHARetract());

        SmartDashboard.putData("Dumper Collect", new DumperCollect());

        SmartDashboard.putData("Dumper Store", new DumperStore());

        SmartDashboard.putData("Dumper Score", new DumperScore());

        SmartDashboard.putData("Level 1", new Level1());

        SmartDashboard.putData("Level 2", new Level2());

        SmartDashboard.putData("Drive to Level 1", new DrivetoLevel1());

        SmartDashboard.putData("Level 3", new Level3());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftStick() {
        return leftStick;
    }

    public Joystick getRightStick() {
        return rightStick;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

