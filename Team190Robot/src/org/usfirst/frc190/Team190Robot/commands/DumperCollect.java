// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc190.Team190Robot.Robot;
import edu.wpi.first.wpilibj.Timer;
// TODO: Implement

/**
 *
 */
public class  DumperCollect extends Command {

    Timer timer;
    boolean notBucketed;
    public DumperCollect() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        //requires(Robot.dumper);
        timer = new Timer();
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        timer.start();
        Robot.dumper.goCollectElbow();
        notBucketed = true;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(timer.get() > 0.5 && notBucketed){
            Robot.dumper.goCollectBucket();
            System.out.println("Collecting with the bucket");
            notBucketed = false;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Robot.dumper.isDone() && timer.get() > 1.5;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.dumper.stopMovement();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
