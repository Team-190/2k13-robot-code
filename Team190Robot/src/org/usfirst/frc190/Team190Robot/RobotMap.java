// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc190.Team190Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftDriveVictors;
    public static Encoder drivetrainLeftDriveEncoder;
    public static PIDController drivetrainLeftDrive;
    public static SpeedController drivetrainRightDriveVictors;
    public static Encoder drivetrainRightDriveEncoder;
    public static PIDController drivetrainRightDrive;
    public static SpeedController shooterWheelVictors(2);
    public static Encoder shooterWheelEncoder;
    public static PIDController shooterWheels;
    public static Encoder shooterPitchEncoder;
    public static SpeedController shooterPitchVictor;
    public static PIDController shooterPitch;
    public static DigitalInput shooterPitchUpperLimit;
    public static DigitalInput shooterPitchLowerLimit;
    public static Solenoid shooterFeederSolenoid;
    public static DigitalInput shooterDiscLightDetection;
    public static Solenoid smallArmsArmSolenoid;
    public static DigitalInput smallArmsLeftArmLimit;
    public static DigitalInput smallArmsRightArmLimit;
    public static DigitalInput smallArmsBarLimit;
    public static Solenoid bigArmsPivotSolenoid;
    public static AnalogChannel bigArmsPivotPotentiometer;
    public static SpeedController bigArmsWinchVictor;
    public static DigitalInput bigArmsWinchUpperLimit;
    public static DigitalInput bigArmsWinchLowerLimit;
    public static Encoder bigArmsWinchEncoder;
    public static Solenoid bumperBumpersBumperSolenoid;
    public static Compressor pneumaticsCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftDriveVictors = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "Left Drive Victors", (Victor) drivetrainLeftDriveVictors);
        
        drivetrainLeftDriveEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Left Drive Encoder", drivetrainLeftDriveEncoder);
        drivetrainLeftDriveEncoder.setDistancePerPulse(1.0);
        drivetrainLeftDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainLeftDriveEncoder.start();
        drivetrainLeftDrive = new PIDController(1.0, 0.0, 0.0, 0.0, drivetrainLeftDriveEncoder, drivetrainLeftDriveVictors, 0.02);
	LiveWindow.addActuator("Drivetrain", "Left Drive", drivetrainLeftDrive);
        drivetrainLeftDrive.setContinuous(false); drivetrainLeftDrive.setAbsoluteTolerance(0.2); 
        drivetrainLeftDrive.setOutputRange(-1.0, 1.0);        
        drivetrainRightDriveVictors = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "Right Drive Victors", (Victor) drivetrainRightDriveVictors);
        
        drivetrainRightDriveEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Right Drive Encoder", drivetrainRightDriveEncoder);
        drivetrainRightDriveEncoder.setDistancePerPulse(1.0);
        drivetrainRightDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainRightDriveEncoder.start();
        drivetrainRightDrive = new PIDController(1.0, 0.0, 0.0, 0.0, drivetrainRightDriveEncoder, drivetrainRightDriveVictors, 0.02);
	LiveWindow.addActuator("Drivetrain", "Right Drive", drivetrainRightDrive);
        drivetrainRightDrive.setContinuous(false); drivetrainRightDrive.setAbsoluteTolerance(0.2); 
        drivetrainRightDrive.setOutputRange(-1.0, 1.0);        
        shooterWheelVictors(2) = new Victor(1, 3);
	LiveWindow.addActuator("Shooter", "Wheel Victors (2)", (Victor) shooterWheelVictors(2));
        
        shooterWheelEncoder = new Encoder(1, 5, 1, 6, 1, 7, false);
	LiveWindow.addSensor("Shooter", "Wheel Encoder", shooterWheelEncoder);
        shooterWheelEncoder.setDistancePerPulse(1.0);
        shooterWheelEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterWheelEncoder.start();
        shooterWheels = new PIDController(1.0, 0.0, 0.0, 0.0, shooterWheelEncoder, shooterWheelVictors(2), 0.02);
	LiveWindow.addActuator("Shooter", "Wheels", shooterWheels);
        shooterWheels.setContinuous(false); shooterWheels.setAbsoluteTolerance(0.2); 
        shooterWheels.setOutputRange(-1.0, 1.0);        
        shooterPitchEncoder = new Encoder(1, 8, 1, 9, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Pitch Encoder", shooterPitchEncoder);
        shooterPitchEncoder.setDistancePerPulse(1.0);
        shooterPitchEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterPitchEncoder.start();
        shooterPitchVictor = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "Pitch Victor", (Victor) shooterPitchVictor);
        
        shooterPitch = new PIDController(1.0, 0.0, 0.0, 0.0, shooterPitchEncoder, shooterPitchVictor, 0.02);
	LiveWindow.addActuator("Shooter", "Pitch", shooterPitch);
        shooterPitch.setContinuous(false); shooterPitch.setAbsoluteTolerance(0.2); 
        shooterPitch.setOutputRange(-1.0, 1.0);        
        shooterPitchUpperLimit = new DigitalInput(1, 10);
	LiveWindow.addSensor("Shooter", "Pitch Upper Limit", shooterPitchUpperLimit);
        
        shooterPitchLowerLimit = new DigitalInput(1, 11);
	LiveWindow.addSensor("Shooter", "Pitch Lower Limit", shooterPitchLowerLimit);
        
        shooterFeederSolenoid = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Feeder Solenoid", shooterFeederSolenoid);
        
        shooterDiscLightDetection = new DigitalInput(1, 12);
	LiveWindow.addSensor("Shooter", "Disc Light Detection", shooterDiscLightDetection);
        
        smallArmsArmSolenoid = new Solenoid(1, 2);
	LiveWindow.addActuator("Small Arms", "ArmSolenoid", smallArmsArmSolenoid);
        
        smallArmsLeftArmLimit = new DigitalInput(1, 13);
	LiveWindow.addSensor("Small Arms", "Left Arm Limit", smallArmsLeftArmLimit);
        
        smallArmsRightArmLimit = new DigitalInput(1, 14);
	LiveWindow.addSensor("Small Arms", "Right Arm Limit", smallArmsRightArmLimit);
        
        smallArmsBarLimit = new DigitalInput(2, 1);
	LiveWindow.addSensor("Small Arms", "Bar Limit", smallArmsBarLimit);
        
        bigArmsPivotSolenoid = new Solenoid(1, 3);
	LiveWindow.addActuator("Big Arms", "Pivot Solenoid", bigArmsPivotSolenoid);
        
        bigArmsPivotPotentiometer = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Big Arms", "Pivot Potentiometer", bigArmsPivotPotentiometer);
        
        bigArmsWinchVictor = new Victor(1, 5);
	LiveWindow.addActuator("Big Arms", "Winch Victor", (Victor) bigArmsWinchVictor);
        
        bigArmsWinchUpperLimit = new DigitalInput(2, 2);
	LiveWindow.addSensor("Big Arms", "Winch Upper Limit", bigArmsWinchUpperLimit);
        
        bigArmsWinchLowerLimit = new DigitalInput(2, 3);
	LiveWindow.addSensor("Big Arms", "Winch Lower Limit", bigArmsWinchLowerLimit);
        
        bigArmsWinchEncoder = new Encoder(2, 4, 2, 5, false, EncodingType.k4X);
	LiveWindow.addSensor("Big Arms", "Winch Encoder", bigArmsWinchEncoder);
        bigArmsWinchEncoder.setDistancePerPulse(1.0);
        bigArmsWinchEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        bigArmsWinchEncoder.start();
        bumperBumpersBumperSolenoid = new Solenoid(1, 4);
	LiveWindow.addActuator("Bumper Bumpers", "Bumper Solenoid", bumperBumpersBumperSolenoid);
        
        pneumaticsCompressor = new Compressor(2, 6, 1, 1);
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
