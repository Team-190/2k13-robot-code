// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftDriveVictor;
    public static SpeedController drivetrainRightDriveVictor;
    public static RobotDrive drivetrainTankDrive;
    public static Gyro drivetrainTargetingGyro;
    public static Gyro drivetrainSwingGyro;
    public static SpeedController shooterWheelVictors;
    public static Encoder shooterWheelEncoder;
    public static PIDController shooterWheels;
    public static Encoder shooterPitchEncoder;
    public static SpeedController shooterPitchVictor;
    public static PIDController shooterPitch;
    public static DigitalInput shooterPitchUpperLimit;
    public static DigitalInput shooterPitchLowerLimit;
    public static Solenoid shooterFeederSolenoid;
    public static Solenoid mGAArmSolenoid;
    public static DigitalInput mGALeftArmLimit;
    public static DigitalInput mGARightArmLimit;
    public static Solenoid oSHAPivotSolenoid;
    public static SpeedController oSHAWinchVictor;
    public static Solenoid oSHAExtensionSolenoid;
    public static DigitalInput oSHAWinchUpperLimit;
    public static DigitalInput oSHAWinchLowerLimit;
    public static DigitalInput oSHATensiometer;
    public static Solenoid bumperBumpersBumperSolenoid;
    public static SpeedController dumperBucketMotor;
    public static Encoder dumperBucketEncoder;
    public static PIDController dumperBucket;
    public static SpeedController dumperElbowMotor;
    public static AnalogChannel dumperElbowPot;
    public static PIDController dumperElbow;
    public static Compressor pneumaticsCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftDriveVictor = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "Left Drive Victor", (Victor) drivetrainLeftDriveVictor);
        
        drivetrainRightDriveVictor = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "Right Drive Victor", (Victor) drivetrainRightDriveVictor);
        
        drivetrainTankDrive = new RobotDrive(drivetrainLeftDriveVictor, drivetrainRightDriveVictor);
	
        drivetrainTankDrive.setSafetyEnabled(false);
        drivetrainTankDrive.setExpiration(0.1);
        drivetrainTankDrive.setSensitivity(0.5);
        drivetrainTankDrive.setMaxOutput(1.0);

        drivetrainTankDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        

        drivetrainTargetingGyro = new Gyro(1, 1);
	LiveWindow.addSensor("Drivetrain", "Targeting Gyro", drivetrainTargetingGyro);
        drivetrainTargetingGyro.setSensitivity(0.007);
        drivetrainSwingGyro = new Gyro(1, 2);
	LiveWindow.addSensor("Drivetrain", "Swing Gyro", drivetrainSwingGyro);
        drivetrainSwingGyro.setSensitivity(0.007);
        shooterWheelVictors = new Victor(1, 3);
	LiveWindow.addActuator("Shooter", "Wheel Victors (2)", (Victor) shooterWheelVictors);
        
        shooterWheelEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Wheel Encoder", shooterWheelEncoder);
        shooterWheelEncoder.setDistancePerPulse(1.0);
        shooterWheelEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterWheelEncoder.start();
        shooterWheels = new PIDController(1.0, 0.0, 0.0, 0.0, shooterWheelEncoder, shooterWheelVictors, 0.02);
	LiveWindow.addActuator("Shooter", "Wheels", shooterWheels);
        shooterWheels.setContinuous(false); shooterWheels.setAbsoluteTolerance(0.2); 
        shooterWheels.setOutputRange(-1.0, 1.0);        

        shooterPitchEncoder = new Encoder(1, 8, 1, 9, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Pitch Encoder", shooterPitchEncoder);
        shooterPitchEncoder.setDistancePerPulse(1.0);
        shooterPitchEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterPitchEncoder.start();
        shooterPitchVictor = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "Pitch Victor", (Victor) shooterPitchVictor);
        
        shooterPitch = new PIDController(1.0, 0.0, 0.0, 0.0, shooterPitchEncoder, shooterPitchVictor, 0.02);
	LiveWindow.addActuator("Shooter", "Pitch", shooterPitch);
        shooterPitch.setContinuous(false); shooterPitch.setAbsoluteTolerance(0.2); 
        shooterPitch.setOutputRange(-1.0, 1.0);        

        shooterPitchUpperLimit = new DigitalInput(1, 10);
	LiveWindow.addSensor("Shooter", "Pitch Upper Limit", shooterPitchUpperLimit);
        
        shooterPitchLowerLimit = new DigitalInput(1, 11);
	LiveWindow.addSensor("Shooter", "Pitch Lower Limit", shooterPitchLowerLimit);
        
        shooterFeederSolenoid = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Feeder Solenoid", shooterFeederSolenoid);
        
        mGAArmSolenoid = new Solenoid(1, 2);
	LiveWindow.addActuator("MGA", "Arm Solenoid", mGAArmSolenoid);
        
        mGALeftArmLimit = new DigitalInput(1, 13);
	LiveWindow.addSensor("MGA", "Left Arm Limit", mGALeftArmLimit);
        
        mGARightArmLimit = new DigitalInput(1, 14);
	LiveWindow.addSensor("MGA", "Right Arm Limit", mGARightArmLimit);
        
        oSHAPivotSolenoid = new Solenoid(1, 3);
	LiveWindow.addActuator("OSHA", "Pivot Solenoid", oSHAPivotSolenoid);
        
        oSHAWinchVictor = new Victor(1, 5);
	LiveWindow.addActuator("OSHA", "Winch Victor", (Victor) oSHAWinchVictor);
        
        oSHAExtensionSolenoid = new Solenoid(1, 5);
	LiveWindow.addActuator("OSHA", "Extension Solenoid", oSHAExtensionSolenoid);
        
        oSHAWinchUpperLimit = new DigitalInput(2, 2);
	LiveWindow.addSensor("OSHA", "Winch Upper Limit", oSHAWinchUpperLimit);
        
        oSHAWinchLowerLimit = new DigitalInput(2, 3);
	LiveWindow.addSensor("OSHA", "Winch Lower Limit", oSHAWinchLowerLimit);
        
        oSHATensiometer = new DigitalInput(2, 1);
	LiveWindow.addSensor("OSHA", "Tensiometer", oSHATensiometer);
        
        bumperBumpersBumperSolenoid = new Solenoid(1, 4);
	LiveWindow.addActuator("Bumper Bumpers", "Bumper Solenoid", bumperBumpersBumperSolenoid);
        
        dumperBucketMotor = new Victor(1, 6);
	LiveWindow.addActuator("Dumper", "Bucket Motor", (Victor) dumperBucketMotor);
        
        dumperBucketEncoder = new Encoder(1, 7, 1, 12, false, EncodingType.k4X);
	LiveWindow.addSensor("Dumper", "Bucket Encoder", dumperBucketEncoder);
        dumperBucketEncoder.setDistancePerPulse(1.0);
        dumperBucketEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        dumperBucketEncoder.start();
        dumperBucket = new PIDController(1.0, 0.0, 0.0, 0.0, dumperBucketEncoder, dumperBucketMotor, 0.02);
	LiveWindow.addActuator("Dumper", "Bucket", dumperBucket);
        dumperBucket.setContinuous(false); dumperBucket.setAbsoluteTolerance(0.2); 
        dumperBucket.setOutputRange(-1.0, 1.0);        

        dumperElbowMotor = new Victor(1, 7);
	LiveWindow.addActuator("Dumper", "Elbow Motor", (Victor) dumperElbowMotor);
        
        dumperElbowPot = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Dumper", "Elbow Pot", dumperElbowPot);
        
        dumperElbow = new PIDController(1.0, 0.0, 0.0, 0.0, dumperElbowPot, dumperElbowMotor, 0.02);
	LiveWindow.addActuator("Dumper", "Elbow", dumperElbow);
        dumperElbow.setContinuous(false); dumperElbow.setAbsoluteTolerance(0.2); 
        dumperElbow.setOutputRange(-1.0, 1.0);        

        pneumaticsCompressor = new Compressor(2, 6, 1, 1);
	
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
