// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc190.Team190Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftDrive;
    public static SpeedController drivetrainRightDrive;
    public static SpeedController shooterWheelVictors;
    public static Encoder shooterWheelEncoder;
    public static PIDController shooterWheels;
    public static Encoder shooterPitchEncoder;
    public static SpeedController shooterPitchVictor;
    public static PIDController shooterPitch;
    public static DigitalInput shooterPitchLowerLimit;
    public static Solenoid shooterFeederSolenoid;
    public static Solenoid smallArmsArmSolenoid;
    public static DigitalInput smallArmsLeftHookLimit;
    public static DigitalInput smallArmsRightHookLimit;
    public static Solenoid bigArmArmSolenoid;
    public static SpeedController bigArmWinchVictor;
    public static DigitalInput bigArmUpperLimit;
    public static DigitalInput bigArmLowerLimit;
    public static DigitalInput bigArmTensionLimit;
    public static Solenoid bigArmLargeArmRotary;
    public static SpeedController dumperVexDumperVex;
    public static AnalogChannel dumperVexVexPot;
    public static SpeedController dumperWindowDumperWindow;
    public static AnalogChannel dumperWindowWindowPot;
    public static Compressor generalCompressor;
    public static Gyro generalYawGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftDrive = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "Left Drive", (Victor) drivetrainLeftDrive);
        
        drivetrainRightDrive = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "Right Drive", (Victor) drivetrainRightDrive);
        
        shooterWheelVictors = new Victor(1, 3);
	LiveWindow.addActuator("Shooter", "Wheel Victors (2)", (Victor) shooterWheelVictors);
        
        shooterWheelEncoder = new Encoder(1, 5, 1, 6, 1, 7, false);
	LiveWindow.addSensor("Shooter", "Wheel Encoder", shooterWheelEncoder);
        shooterWheelEncoder.setDistancePerPulse(1.0);
        shooterWheelEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterWheelEncoder.start();
        shooterWheels = new PIDController(1.0, 0.0, 0.0, 0.0, shooterWheelEncoder, shooterWheelVictors, 0.02);
	LiveWindow.addActuator("Shooter", "Wheels", shooterWheels);
        shooterWheels.setContinuous(false); shooterWheels.setAbsoluteTolerance(0.2); 
        shooterWheels.setOutputRange(-1.0, 1.0);        

        shooterPitchEncoder = new Encoder(1, 8, 1, 9, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Pitch Encoder", shooterPitchEncoder);
        shooterPitchEncoder.setDistancePerPulse(1.0);
        shooterPitchEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterPitchEncoder.start();
        shooterPitchVictor = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "Pitch Victor", (Victor) shooterPitchVictor);
        
        shooterPitch = new PIDController(1.0, 0.0, 0.0, 0.0, shooterPitchEncoder, shooterPitchVictor, 0.02);
	LiveWindow.addActuator("Shooter", "Pitch", shooterPitch);
        shooterPitch.setContinuous(false); shooterPitch.setAbsoluteTolerance(0.2); 
        shooterPitch.setOutputRange(-1.0, 1.0);        

        shooterPitchLowerLimit = new DigitalInput(1, 11);
	LiveWindow.addSensor("Shooter", "Pitch Lower Limit", shooterPitchLowerLimit);
        
        shooterFeederSolenoid = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Feeder Solenoid", shooterFeederSolenoid);
        
        smallArmsArmSolenoid = new Solenoid(1, 2);
	LiveWindow.addActuator("Small Arms", "ArmSolenoid", smallArmsArmSolenoid);
        
        smallArmsLeftHookLimit = new DigitalInput(1, 13);
	LiveWindow.addSensor("Small Arms", "Left Hook Limit", smallArmsLeftHookLimit);
        
        smallArmsRightHookLimit = new DigitalInput(1, 14);
	LiveWindow.addSensor("Small Arms", "Right Hook Limit", smallArmsRightHookLimit);
        
        bigArmArmSolenoid = new Solenoid(1, 3);
	LiveWindow.addActuator("Big Arm", "Arm Solenoid", bigArmArmSolenoid);
        
        bigArmWinchVictor = new Victor(1, 6);
	LiveWindow.addActuator("Big Arm", "Winch Victor", (Victor) bigArmWinchVictor);
        
        bigArmUpperLimit = new DigitalInput(1, 1);
	LiveWindow.addSensor("Big Arm", "Upper Limit", bigArmUpperLimit);
        
        bigArmLowerLimit = new DigitalInput(1, 2);
	LiveWindow.addSensor("Big Arm", "Lower Limit", bigArmLowerLimit);
        
        bigArmTensionLimit = new DigitalInput(1, 3);
	LiveWindow.addSensor("Big Arm", "Tension Limit", bigArmTensionLimit);
        
        bigArmLargeArmRotary = new Solenoid(1, 4);
	LiveWindow.addActuator("Big Arm", "Large Arm Rotary", bigArmLargeArmRotary);
        
        dumperVexDumperVex = new Victor(1, 9);
	LiveWindow.addActuator("DumperVex", "DumperVex", (Victor) dumperVexDumperVex);
        
        dumperVexVexPot = new AnalogChannel(1, 2);
	LiveWindow.addSensor("DumperVex", "VexPot", dumperVexVexPot);
        
        dumperWindowDumperWindow = new Victor(1, 7);
	LiveWindow.addActuator("DumperWindow", "Dumper Window", (Victor) dumperWindowDumperWindow);
        
        dumperWindowWindowPot = new AnalogChannel(1, 1);
	LiveWindow.addSensor("DumperWindow", "WindowPot", dumperWindowWindowPot);
        
        generalCompressor = new Compressor(2, 6, 1, 1);
	
        
        generalYawGyro = new Gyro(1, 3);
	LiveWindow.addSensor("General", "Yaw Gyro", generalYawGyro);
        generalYawGyro.setSensitivity(1.25);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
